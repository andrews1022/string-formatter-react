{"version":3,"sources":["components/Heading.js","components/Checkbox.js","data/Formatters.js","components/StringFormatter.js","functions/FormattingFunctions.js","components/Footer.js","App.js","index.js"],"names":["Heading","text","className","Checkbox","formatter","selectCheck","type","name","id","onChange","htmlFor","label","formatters","StringFormatter","useState","input","setInput","output","setOutput","checkedBox","setCheckedBox","errorMessage","setErrorMessage","copy","setCopy","inputRef","useRef","outputRef","e","selectedCheckbox","target","checked","length","currentState","preventDefault","ref","current","value","onClick","toLowerCase","toUpperCase","formatTextUpperCase","replace","formatTextWebReady","split","map","v","Math","round","random","join","formatTextPeopleFuckingDying","c","formatTextSentenceCase","duration","setTimeout","readOnly","navigator","clipboard","writeText","Footer","Date","getFullYear","href","rel","icon","faGithub","size","faTwitter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebdd3061.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading = ({ text }) => <h1 className='heading'>{text}</h1>;\r\n\r\nexport default Heading;\r\n","import React from 'react';\r\n\r\nconst Checkbox = ({ formatter, selectCheck }) => {\r\n\treturn (\r\n\t\t<div className='formatter__group'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='formatter__check'\r\n\t\t\t\ttype='checkbox'\r\n\t\t\t\tname={formatter.id}\r\n\t\t\t\tid={formatter.id}\r\n\t\t\t\tonChange={selectCheck}\r\n\t\t\t/>\r\n\t\t\t<label className='formatter__check-label' htmlFor={formatter.id}>\r\n\t\t\t\t{formatter.label}\r\n\t\t\t</label>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Checkbox;\r\n","export const formatters = [\r\n\t{\r\n\t\tid: 'format-lowercase',\r\n\t\tlabel: 'lowercase'\r\n\t},\r\n\t{\r\n\t\tid: 'format-uppercase',\r\n\t\tlabel: 'uppercase'\r\n\t},\r\n\t{\r\n\t\tid: 'format-web-ready',\r\n\t\tlabel: 'web-ready'\r\n\t},\r\n\t{\r\n\t\tid: 'format-people-fucking-dying',\r\n\t\tlabel: 'PeOPleFucKInGDyINg'\r\n\t},\r\n\t{\r\n\t\tid: 'format-sentence-case',\r\n\t\tlabel: 'Sentence case'\r\n\t}\r\n];\r\n","import React, { useState, useRef } from 'react';\r\nimport Checkbox from './Checkbox';\r\nimport { formatters } from '../data/Formatters';\r\nimport {\r\n\tformatTextLowerCase,\r\n\tformatTextUpperCase,\r\n\tformatTextWebReady,\r\n\tformatTextPeopleFuckingDying,\r\n\tformatTextSentenceCase\r\n} from './../functions/FormattingFunctions';\r\n\r\nconst StringFormatter = () => {\r\n\t// state\r\n\tconst [input, setInput] = useState('');\r\n\tconst [output, setOutput] = useState('');\r\n\tconst [checkedBox, setCheckedBox] = useState([]);\r\n\tconst [errorMessage, setErrorMessage] = useState('');\r\n\tconst [copy, setCopy] = useState('Copy');\r\n\r\n\t// refs\r\n\tconst inputRef = useRef(null);\r\n\tconst outputRef = useRef(null);\r\n\r\n\t// add what's being typed to input state\r\n\tconst trackInput = () => {\r\n\t\tsetInput(inputRef.current.value);\r\n\t};\r\n\r\n\t// limit number of checkboxes checked\r\n\tconst selectCheck = (e) => {\r\n\t\tconst selectedCheckbox = e.target;\r\n\t\tconst selectedCheckboxIsChecked = selectedCheckbox.checked;\r\n\t\tconst limit = 1;\r\n\r\n\t\tif (selectedCheckboxIsChecked) {\r\n\t\t\tif (checkedBox.length < limit) {\r\n\t\t\t\tsetCheckedBox((currentState) => [...currentState, selectedCheckbox]);\r\n\t\t\t} else {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\te.target.checked = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// reset to initial state\r\n\t\t\tsetCheckedBox(() => []);\r\n\t\t}\r\n\t};\r\n\r\n\t// display error message\r\n\tconst displayErrorMessage = (message, duration) => {\r\n\t\tsetErrorMessage(message);\r\n\t\tsetTimeout(() => setErrorMessage(''), duration);\r\n\t};\r\n\r\n\t// mirror text from input field to output field\r\n\tconst mirrorText = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (!input || checkedBox.length === 0) {\r\n\t\t\tdisplayErrorMessage('Please enter a value and/or select a box', 1152250);\r\n\t\t} else {\r\n\t\t\tswitch (checkedBox[0].id) {\r\n\t\t\t\tcase 'format-lowercase':\r\n\t\t\t\t\tsetOutput(formatTextLowerCase(input));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'format-uppercase':\r\n\t\t\t\t\tsetOutput(formatTextUpperCase(input));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'format-web-ready':\r\n\t\t\t\t\tsetOutput(formatTextWebReady(input));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'format-people-fucking-dying':\r\n\t\t\t\t\tsetOutput(formatTextPeopleFuckingDying(input));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'format-sentence-case':\r\n\t\t\t\t\tsetOutput(formatTextSentenceCase(input));\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// copy text in output field to clipboard\r\n\tconst copyOutputToClipboard = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tnavigator.clipboard.writeText(output);\r\n\t\tsetCopy('Copied!');\r\n\t\tsetTimeout(() => setCopy('Copy'), 1500);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form className='formatter'>\r\n\t\t\t<div className='formatter__row'>\r\n\t\t\t\t<div className='formatter__box'>\r\n\t\t\t\t\t<label className='formatter__label' htmlFor='input'>\r\n\t\t\t\t\t\tInput\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tclassName='formatter__textarea'\r\n\t\t\t\t\t\tname='input'\r\n\t\t\t\t\t\tid='input'\r\n\t\t\t\t\t\tref={inputRef}\r\n\t\t\t\t\t\tonChange={trackInput}\r\n\t\t\t\t\t></textarea>\r\n\t\t\t\t\t<input className='formatter__button' type='submit' value='Format' onClick={mirrorText} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='formatter__box'>\r\n\t\t\t\t\t<label className='formatter__label' htmlFor='output'>\r\n\t\t\t\t\t\tOutput\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tclassName='formatter__textarea formatter__textarea--output'\r\n\t\t\t\t\t\tname='output'\r\n\t\t\t\t\t\tid='output'\r\n\t\t\t\t\t\tref={outputRef}\r\n\t\t\t\t\t\tvalue={output}\r\n\t\t\t\t\t\treadOnly={true}\r\n\t\t\t\t\t></textarea>\r\n\t\t\t\t\t<button className='formatter__button' onClick={copyOutputToClipboard}>\r\n\t\t\t\t\t\t{copy}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t{errorMessage && <p className='formatter__error'>{errorMessage}</p>}\r\n\t\t\t</div>\r\n\t\t\t<div className='formatter__row'>\r\n\t\t\t\t<div className='formatter__box'>\r\n\t\t\t\t\t<span className='formatter__label'>Options (Pick 1)</span>\r\n\t\t\t\t\t{formatters.map((formatter) => (\r\n\t\t\t\t\t\t<Checkbox formatter={formatter} selectCheck={selectCheck} key={formatter.id} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default StringFormatter;\r\n","// convert text to lowercase\r\nexport const formatTextLowerCase = (text) => {\r\n\treturn text.toLowerCase();\r\n};\r\n\r\n// convert text to lowercase\r\nexport const formatTextUpperCase = (text) => {\r\n\treturn text.toUpperCase();\r\n};\r\n\r\n// convert text to \"web-ready\"\r\nexport const formatTextWebReady = (text) => {\r\n\treturn text\r\n\t\t.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>{}[\\]\\\\/]/g, '')\r\n\t\t.replace(/\\s+/g, '-')\r\n\t\t.toLowerCase();\r\n};\r\n\r\n// convert text to \"PeOPleFucKInGDyINg\"\r\nexport const formatTextPeopleFuckingDying = (text) => {\r\n\treturn text\r\n\t\t.split('')\r\n\t\t.map((v) => (Math.round(Math.random()) ? v.toUpperCase() : v.toLowerCase()))\r\n\t\t.join('');\r\n};\r\n\r\n// conver text to sentence case\r\nexport const formatTextSentenceCase = (text) => {\r\n\treturn text.toLowerCase().replace(/(^\\s*\\w|[.!?]\\s*\\w)/g, (c) => c.toUpperCase());\r\n};\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub, faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Footer = () => {\r\n\tconst gitHubLink = 'https://github.com/andrews1022/string-formatter-react';\r\n\tconst twitterLink = 'https://twitter.com/andrew_devsrc';\r\n\r\n\treturn (\r\n\t\t<footer className='footer'>\r\n\t\t\t<p className='footer__text'>\r\n\t\t\t\t© {new Date().getFullYear()} all rights reserved. designed and built and andrew shearer\r\n\t\t\t</p>\r\n\t\t\t<div className='footer__icon-row'>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='footer__icon-link'\r\n\t\t\t\t\thref={gitHubLink}\r\n\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\trel='noopener noreferrer'\r\n\t\t\t\t>\r\n\t\t\t\t\t<FontAwesomeIcon className='footer__icon' icon={faGithub} size='lg' />\r\n\t\t\t\t</a>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='footer__icon-link'\r\n\t\t\t\t\thref={twitterLink}\r\n\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\trel='noopener noreferrer'\r\n\t\t\t\t>\r\n\t\t\t\t\t<FontAwesomeIcon className='footer__icon' icon={faTwitter} size='lg' />\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport Heading from './components/Heading';\nimport StringFormatter from './components/StringFormatter';\nimport Footer from './components/Footer';\nimport './scss/app.min.css';\n\nconst App = () => {\n\treturn (\n\t\t<div className='wrapper'>\n\t\t\t<Heading text='String Formatter' />\n\t\t\t<StringFormatter />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}