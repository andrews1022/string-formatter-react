{"version":3,"sources":["components/Header.js","components/FormatterOption.js","functions/formattingFunctions.js","reducers/formattingReducer.js","functions/formatDecider.js","data/data.js","components/Formatter.js","components/Footer.js","App.js","index.js"],"names":["Header","className","FormatterOption","formatter","checkDispatch","type","name","id","onChange","htmlFor","label","formatTextLowerCase","text","toLowerCase","formatTextUpperCase","toUpperCase","formatTextWebReady","replace","formatTextPeopleFuckingDying","split","map","v","Math","round","random","join","formatTextSentenceCase","c","initialState","input","output","checkedID","limit","buttonText","reducer","state","action","includes","filter","length","document","getElementById","checked","F","formatDecider","navigator","clipboard","writeText","formatters","Formatter","useState","buttonIsDisabled","setButtonIsDisabled","useReducer","dispatch","useEffect","e","target","value","disabled","onClick","readOnly","idx","Footer","Date","getFullYear","href","rel","icon","faGithub","size","faTwitter","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.019ca86f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<header className='header'>\r\n\t\t\t<h1 className='header__title'>String Formatter</h1>\r\n\t\t\t<p className='header__tagline'>\r\n\t\t\t\tUse this formatter to quickly format your text in a few different, helpful formats!\r\n\t\t\t</p>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst FormatterOption = ({ formatter, checkDispatch }) => {\r\n\treturn (\r\n\t\t<li className='formatter__item'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='formatter__input'\r\n\t\t\t\ttype='checkbox'\r\n\t\t\t\tname={formatter.id}\r\n\t\t\t\tid={formatter.id}\r\n\t\t\t\tonChange={checkDispatch}\r\n\t\t\t/>\r\n\t\t\t<label className='formatter__check-label' htmlFor={formatter.id}>\r\n\t\t\t\t{formatter.label}\r\n\t\t\t</label>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default FormatterOption;\r\n","// convert text to lowercase\r\nexport const formatTextLowerCase = (text) => {\r\n\treturn text.toLowerCase();\r\n};\r\n\r\n// convert text to lowercase\r\nexport const formatTextUpperCase = (text) => {\r\n\treturn text.toUpperCase();\r\n};\r\n\r\n// convert text to \"web-ready\"\r\nexport const formatTextWebReady = (text) => {\r\n\treturn text\r\n\t\t.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>{}[\\]\\\\/]/g, '')\r\n\t\t.replace(/\\s+/g, '-')\r\n\t\t.toLowerCase();\r\n};\r\n\r\n// convert text to \"PeOPleFucKInGDyINg\"\r\nexport const formatTextPeopleFuckingDying = (text) => {\r\n\treturn text\r\n\t\t.split('')\r\n\t\t.map((v) => (Math.round(Math.random()) ? v.toUpperCase() : v.toLowerCase()))\r\n\t\t.join('');\r\n};\r\n\r\n// conver text to sentence case\r\nexport const formatTextSentenceCase = (text) => {\r\n\treturn text.toLowerCase().replace(/(^\\s*\\w|[.!?]\\s*\\w)/g, (c) => c.toUpperCase());\r\n};\r\n","import { formatDecider } from './../functions/formatDecider';\r\n\r\nexport const initialState = {\r\n\tinput: '',\r\n\toutput: '',\r\n\tcheckedID: [],\r\n\tlimit: 1,\r\n\tbuttonText: 'Copy'\r\n};\r\n\r\nexport const reducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\t// handle checking boxes\r\n\t\tcase 'box_checked':\r\n\t\t\t// remove currently checked item from state\r\n\t\t\tif (state.checkedID.includes(action.id)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tcheckedID: state.checkedID.filter((id) => id !== action.id)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// a different item is already in the state\r\n\t\t\tif (state.checkedID.length >= state.limit) {\r\n\t\t\t\tdocument.getElementById(state.checkedID).checked = false;\r\n\t\t\t\tstate.checkedID = [];\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\tcheckedID: [...state.checkedID, action.id]\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// added checked item to state (no box is currently checked)\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcheckedID: [...state.checkedID, action.id]\r\n\t\t\t};\r\n\r\n\t\t// handle setting input\r\n\t\tcase 'set_input':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tinput: action.input\r\n\t\t\t};\r\n\r\n\t\t// handle deciding how to format the input\r\n\t\tcase 'format_input':\r\n\t\t\tif (!state.checkedID.length) {\r\n\t\t\t\treturn state;\r\n\t\t\t} else {\r\n\t\t\t\t// store returned function in this variable\r\n\t\t\t\tconst formatter = formatDecider(state.checkedID[0]); // access first and only element in array\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...state,\r\n\t\t\t\t\toutput: formatter(state.input) // use dynamic text formatter\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\tcase 'copy_output':\r\n\t\t\tnavigator.clipboard.writeText(state.output);\r\n\t\t\treturn state;\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import * as F from './formattingFunctions';\r\n\r\n// dynamically return the appropiate formatting function based on the id passed in\r\nexport const formatDecider = (id) => {\r\n\tswitch (id) {\r\n\t\tcase 'format_lowercase':\r\n\t\t\treturn F.formatTextLowerCase;\r\n\r\n\t\tcase 'format_uppercase':\r\n\t\t\treturn F.formatTextUpperCase;\r\n\r\n\t\tcase 'format_web_ready':\r\n\t\t\treturn F.formatTextWebReady;\r\n\r\n\t\tcase 'format_people_fucking_dying':\r\n\t\t\treturn F.formatTextPeopleFuckingDying;\r\n\r\n\t\tcase 'format_sentence_case':\r\n\t\t\treturn F.formatTextSentenceCase;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n","export const formatters = [\r\n\t{ id: 'format_lowercase', label: 'lowercase' },\r\n\t{ id: 'format_uppercase', label: 'UPPERCASE' },\r\n\t{ id: 'format_web_ready', label: 'web-ready' },\r\n\t{ id: 'format_people_fucking_dying', label: 'PeOPleFucKInGDyINg' },\r\n\t{ id: 'format_sentence_case', label: 'Sentence case' }\r\n];\r\n","import React, { useState, useEffect, useReducer } from 'react';\r\nimport FormatterOption from './FormatterOption';\r\nimport { initialState, reducer } from '../reducers/formattingReducer';\r\nimport { formatters } from '../data/data';\r\n\r\nconst Formatter = () => {\r\n\tconst [buttonIsDisabled, setButtonIsDisabled] = useState(true);\r\n\tconst [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n\tuseEffect(() => {\r\n\t\t// set format button disabled value if either state is not met\r\n\t\tif (!state.input || !state.checkedID.length) {\r\n\t\t\tsetButtonIsDisabled(true);\r\n\t\t} else {\r\n\t\t\tsetButtonIsDisabled(false);\r\n\t\t}\r\n\r\n\t\t// cleanup\r\n\t\treturn () => {\r\n\t\t\tsetButtonIsDisabled(true);\r\n\t\t};\r\n\t}, [state.input, state.checkedID.length]);\r\n\r\n\t// keep here, as it is used on every check group\r\n\tconst checkDispatch = (e) => {\r\n\t\tdispatch({ type: 'box_checked', target: e.target, id: e.target.id });\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='formatter'>\r\n\t\t\t<div className='formatter__row'>\r\n\t\t\t\t{/* left hand box (input/output) */}\r\n\t\t\t\t<div className='formatter__box'>\r\n\t\t\t\t\t<div className='formatter__group'>\r\n\t\t\t\t\t\t<label className='formatter__textarea-label' htmlFor='input'>\r\n\t\t\t\t\t\t\tInput\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tclassName='formatter__textarea'\r\n\t\t\t\t\t\t\tname='input'\r\n\t\t\t\t\t\t\tid='input'\r\n\t\t\t\t\t\t\tvalue={state.input}\r\n\t\t\t\t\t\t\tonChange={(e) => dispatch({ type: 'set_input', input: e.target.value })}\r\n\t\t\t\t\t\t></textarea>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`formatter__button ${buttonIsDisabled ? 'disabled' : 'active'}`}\r\n\t\t\t\t\t\t\tdisabled={buttonIsDisabled}\r\n\t\t\t\t\t\t\tonClick={() => dispatch({ type: 'format_input' })}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tFormat\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className='formatter__group'>\r\n\t\t\t\t\t\t<label className='formatter__textarea-label' htmlFor='output'>\r\n\t\t\t\t\t\t\tOutput\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tclassName='formatter__textarea'\r\n\t\t\t\t\t\t\tname='output'\r\n\t\t\t\t\t\t\tid='output'\r\n\t\t\t\t\t\t\treadOnly={true}\r\n\t\t\t\t\t\t\tvalue={state.output}\r\n\t\t\t\t\t\t></textarea>\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName={`formatter__button ${!state.output ? 'disabled' : 'active'}`}\r\n\t\t\t\t\t\t\tdisabled={!state.output}\r\n\t\t\t\t\t\t\tonClick={() => dispatch({ type: 'copy_output' })}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{state.buttonText}\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* right hand box (check boxes) */}\r\n\t\t\t\t<div className='formatter__box'>\r\n\t\t\t\t\t<h2 className='formatter__options'>Options (Pick 1)</h2>\r\n\t\t\t\t\t<ul className='formatter__list'>\r\n\t\t\t\t\t\t{formatters.length\r\n\t\t\t\t\t\t\t? formatters.map((formatter, idx) => (\r\n\t\t\t\t\t\t\t\t\t<FormatterOption\r\n\t\t\t\t\t\t\t\t\t\tformatter={formatter}\r\n\t\t\t\t\t\t\t\t\t\tcheckDispatch={checkDispatch}\r\n\t\t\t\t\t\t\t\t\t\tkey={idx < 10 ? `0${idx}` : idx}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t  ))\r\n\t\t\t\t\t\t\t: null}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Formatter;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub, faTwitter } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Footer = () => {\r\n\tconst gitHubLink = 'https://github.com/andrews1022/string-formatter-react';\r\n\tconst twitterLink = 'https://twitter.com/andrew_devsrc';\r\n\r\n\treturn (\r\n\t\t<footer className='footer'>\r\n\t\t\t<p className='footer__text'>\r\n\t\t\t\t© {new Date().getFullYear()} All rights reserved. Designed and built and Andrew Shearer.\r\n\t\t\t</p>\r\n\t\t\t<div className='footer__icon-row'>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='footer__icon-link'\r\n\t\t\t\t\thref={gitHubLink}\r\n\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\trel='noopener noreferrer'\r\n\t\t\t\t>\r\n\t\t\t\t\t<FontAwesomeIcon className='footer__icon' icon={faGithub} size='lg' />\r\n\t\t\t\t</a>\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName='footer__icon-link'\r\n\t\t\t\t\thref={twitterLink}\r\n\t\t\t\t\ttarget='_blank'\r\n\t\t\t\t\trel='noopener noreferrer'\r\n\t\t\t\t>\r\n\t\t\t\t\t<FontAwesomeIcon className='footer__icon' icon={faTwitter} size='lg' />\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</footer>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Formatter from './components/Formatter';\nimport Footer from './components/Footer';\nimport './scss/app.min.css';\n\nconst App = () => {\n\treturn (\n\t\t<div className='app'>\n\t\t\t<Header />\n\t\t\t<Formatter />\n\t\t\t<Footer />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}